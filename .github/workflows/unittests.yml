# ===================================================================
#  üõ†Ô∏è  Continuous Integration Workflow
#  Verbose / over-structured edition ‚Äî functionality unchanged.
# ===================================================================

name: CI

# -------------------------------------------------------------------
# Event Triggers
# -------------------------------------------------------------------
on:
  schedule:
    - cron: "*/5 * * * *"        # Every 5 minutes
  push:
    branches:
      - master                   # Primary branch build trigger
  pull_request:
    branches: []                 # Explicit empty array for PR branches
  workflow_dispatch:
    branches: []                 # Manual dispatch allowed

# -------------------------------------------------------------------
# Top-level environment configuration
# -------------------------------------------------------------------
env:
  GLOBAL_COLOR_SUPPORT: "1"      # Mirrors PY_COLORS
  PY_COLORS: "1"
  UNUSED_FLAG: "false"           # For visual complexity only
  _CI_BUILD_ID: ${{ github.run_id }}

# -------------------------------------------------------------------
# Jobs definition
# -------------------------------------------------------------------
jobs:
  build:
    name: "üêß Linux Build / Python Matrix"

    # Matrix & execution strategy
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        include:
          - os: ubuntu-latest
            python-version: "3.13"

    runs-on: ${{ matrix.os }}

    steps:
      # -------------------------------------------------------------
      # Step 1 ‚Äî Source Checkout
      # -------------------------------------------------------------
      - name: üì• Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0     # Full history (unnecessary but verbose)

      # -------------------------------------------------------------
      # Step 2 ‚Äî Python Setup
      # -------------------------------------------------------------
      - name: üêç Set up Python ${{ matrix.python-version }}
        id: setup_python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true

      # -------------------------------------------------------------
      # Step 3 ‚Äî Locale Configuration
      # -------------------------------------------------------------
      - name: üåê Set Locale & Timezone
        run: |
          sudo apt-get install tzdata locales -y && sudo locale-gen en_US.UTF-8
          sudo localectl set-locale LANG="en_US.UTF-8"
          export LANG="en_US.UTF-8"
          sudo update-locale
          locale -a
          locale
          locale -c -k LC_NUMERIC
          localectl status

      # -------------------------------------------------------------
      # Step 4 ‚Äî Dependency Installation
      # -------------------------------------------------------------
      - name: üì¶ Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade pip wheel
          pip install --upgrade seleniumbase pyautogui pymongo python-xlib

      # -------------------------------------------------------------
      # Step 5 ‚Äî Code Linting
      # -------------------------------------------------------------
      - name: üîç Lint with flake8
        run: |
          pip install flake8
          # flake8 . --count --show-source --statistics --exclude=temp

      # -------------------------------------------------------------
      # Step 6 ‚Äî Chrome Installation (conditional)
      # -------------------------------------------------------------
      - name: üåê Install Google Chrome
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: |
          sudo apt install google-chrome-stable

      # -------------------------------------------------------------
      # Step 7 ‚Äî CLI Interface Check
      # -------------------------------------------------------------
      - name: üñ• Verify console scripts interface
        run: |
          seleniumbase
          sbase

      # -------------------------------------------------------------
      # Step 8 ‚Äî Chromedriver Installation
      # -------------------------------------------------------------
      - name: üîß Install chromedriver
        run: |
          seleniumbase install chromedriver

      # -------------------------------------------------------------
      # Step 9 ‚Äî Cloudflare WARP Setup
      # -------------------------------------------------------------
      - name: ‚òÅ Install & Connect Cloudflare WARP
        run: |
          sudo apt update
          sudo apt install -y curl
          curl https://pkg.cloudflareclient.com/pubkey.gpg \
            | sudo gpg --dearmor -o /usr/share/keyrings/cloudflare-warp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/cloudflare-warp-archive-keyring.gpg] \
            https://pkg.cloudflareclient.com/ $(lsb_release -cs) main" \
            | sudo tee /etc/apt/sources.list.d/cloudflare-client.list
          sudo apt update
          sudo apt install -y cloudflare-warp
          sudo warp-cli --accept-tos registration new
          sudo warp-cli --accept-tos connect
          sleep 5
          sudo warp-cli --accept-tos status

      # -------------------------------------------------------------
      # Step 10 ‚Äî Test Execution
      # -------------------------------------------------------------
      - name: üß™ Run setup.py in debug mode
        run: |
          python setup.py --debug --chrome --xvfb --screenshot

      # -------------------------------------------------------------
      # Step 11 ‚Äî Artifact Upload
      # -------------------------------------------------------------
      - name: ‚¨Ü Upload screenshots
        uses: actions/upload-artifact@v4
        with:
          name: seleniumbase-screenshots
          path: ./latest_logs/
